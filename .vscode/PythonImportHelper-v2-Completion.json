[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "gTTS",
        "importPath": "gtts",
        "description": "gtts",
        "isExtraImport": true,
        "detail": "gtts",
        "documentation": {}
    },
    {
        "label": "sounddevice",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sounddevice",
        "description": "sounddevice",
        "detail": "sounddevice",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "speech_recognition",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "speech_recognition",
        "description": "speech_recognition",
        "detail": "speech_recognition",
        "documentation": {}
    },
    {
        "label": "pyttsx3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyttsx3",
        "description": "pyttsx3",
        "detail": "pyttsx3",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "hindi",
        "description": "hindi",
        "peekOfCode": "t = \"hello\"\n# Convert Hindi text to speech\ntts = gTTS(t, lang='hi')\n# Save the audio to a file\ntts.save(\"hindi_audio.mp3\")\n# Play the audio (macOS)\nos.system(\"afplay hindi_audio.mp3\")  # macOS",
        "detail": "hindi",
        "documentation": {}
    },
    {
        "label": "tts",
        "kind": 5,
        "importPath": "hindi",
        "description": "hindi",
        "peekOfCode": "tts = gTTS(t, lang='hi')\n# Save the audio to a file\ntts.save(\"hindi_audio.mp3\")\n# Play the audio (macOS)\nos.system(\"afplay hindi_audio.mp3\")  # macOS",
        "detail": "hindi",
        "documentation": {}
    },
    {
        "label": "check_for_sound",
        "kind": 2,
        "importPath": "practice",
        "description": "practice",
        "peekOfCode": "def check_for_sound(indata):\n    \"\"\"Check if sound is detected based on the volume of the audio data.\"\"\"\n    # Calculate the volume (magnitude) of the audio data\n    volume_norm = np.linalg.norm(indata) * 10  # Increase the multiplier for sensitivity\n    if volume_norm > THRESHOLD:\n        return True\n    else:\n        return False\ndef audio_callback(indata, frames, time, status):\n    \"\"\"Callback function to process the audio data and detect sound.\"\"\"",
        "detail": "practice",
        "documentation": {}
    },
    {
        "label": "audio_callback",
        "kind": 2,
        "importPath": "practice",
        "description": "practice",
        "peekOfCode": "def audio_callback(indata, frames, time, status):\n    \"\"\"Callback function to process the audio data and detect sound.\"\"\"\n    if status:\n        print(status, flush=True)\n    # Check if sound is detected based on the volume\n    if check_for_sound(indata):\n        print(\"Sound detected!\")\n    else:\n        print(\"No sound detected.\")\ndef main():",
        "detail": "practice",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "practice",
        "description": "practice",
        "peekOfCode": "def main():\n    \"\"\"Main function to continuously check for sound detection.\"\"\"\n    with sd.InputStream(callback=audio_callback, samplerate=RATE, blocksize=BLOCKSIZE):\n        print(\"Listening for sound... Press Ctrl+C to stop.\")\n        while True:\n            time.sleep(0.7)  # Keep the program running and checking for sound\nif __name__ == \"__main__\":\n    main()",
        "detail": "practice",
        "documentation": {}
    },
    {
        "label": "RATE",
        "kind": 5,
        "importPath": "practice",
        "description": "practice",
        "peekOfCode": "RATE = 4000  # Sample rate (samples per second)\nBLOCKSIZE = 1024  # Number of frames per buffer (instead of frames_per_buffer)\nTHRESHOLD = 20  # Volume threshold to detect sound (adjust as needed)\ndef check_for_sound(indata):\n    \"\"\"Check if sound is detected based on the volume of the audio data.\"\"\"\n    # Calculate the volume (magnitude) of the audio data\n    volume_norm = np.linalg.norm(indata) * 10  # Increase the multiplier for sensitivity\n    if volume_norm > THRESHOLD:\n        return True\n    else:",
        "detail": "practice",
        "documentation": {}
    },
    {
        "label": "BLOCKSIZE",
        "kind": 5,
        "importPath": "practice",
        "description": "practice",
        "peekOfCode": "BLOCKSIZE = 1024  # Number of frames per buffer (instead of frames_per_buffer)\nTHRESHOLD = 20  # Volume threshold to detect sound (adjust as needed)\ndef check_for_sound(indata):\n    \"\"\"Check if sound is detected based on the volume of the audio data.\"\"\"\n    # Calculate the volume (magnitude) of the audio data\n    volume_norm = np.linalg.norm(indata) * 10  # Increase the multiplier for sensitivity\n    if volume_norm > THRESHOLD:\n        return True\n    else:\n        return False",
        "detail": "practice",
        "documentation": {}
    },
    {
        "label": "THRESHOLD",
        "kind": 5,
        "importPath": "practice",
        "description": "practice",
        "peekOfCode": "THRESHOLD = 20  # Volume threshold to detect sound (adjust as needed)\ndef check_for_sound(indata):\n    \"\"\"Check if sound is detected based on the volume of the audio data.\"\"\"\n    # Calculate the volume (magnitude) of the audio data\n    volume_norm = np.linalg.norm(indata) * 10  # Increase the multiplier for sensitivity\n    if volume_norm > THRESHOLD:\n        return True\n    else:\n        return False\ndef audio_callback(indata, frames, time, status):",
        "detail": "practice",
        "documentation": {}
    },
    {
        "label": "recognizer",
        "kind": 5,
        "importPath": "speech_text",
        "description": "speech_text",
        "peekOfCode": "recognizer = sr.Recognizer()\n# Use the microphone as the audio source\nwith sr.Microphone() as source:\n    print(\"Adjusting for ambient noise... Please wait.\")\n    recognizer.adjust_for_ambient_noise(source)     #voice handle with threshod value\n    print(\"Listening for your speech... Speak now!\")\n    try:\n        # Capture the speech from the microphone\n        audio = recognizer.listen(source)\n        print(\"Processing your speech...\")",
        "detail": "speech_text",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "tts",
        "description": "tts",
        "peekOfCode": "engine = pyttsx3.init()\n# Set properties (optional)\nengine.setProperty('rate', 150)  # Speed of speech\nengine.setProperty('volume', 1)  # Volume (0.0 to 1.0)\nmsg=input(\"enter message: \")\n# Say something\nengine.say(msg)\n# Wait until speech is finished\nengine.runAndWait()",
        "detail": "tts",
        "documentation": {}
    },
    {
        "label": "speak",
        "kind": 2,
        "importPath": "voice_deepseek",
        "description": "voice_deepseek",
        "peekOfCode": "def speak(cleaned_output):\n    engine.setProperty('rate', 150)\n    if mode:\n        print(\"======***\")\n        engine.say(cleaned_output)\n        engine.runAndWait()\n    else:\n        engine.stop()\ndef listen():\n    print(\"speech\")",
        "detail": "voice_deepseek",
        "documentation": {}
    },
    {
        "label": "listen",
        "kind": 2,
        "importPath": "voice_deepseek",
        "description": "voice_deepseek",
        "peekOfCode": "def listen():\n    print(\"speech\")\n    recognizer = sr.Recognizer()\n    with sr.Microphone() as source:\n        recognizer.adjust_for_ambient_noise(source)  #voice handle with threshod value(noise)\n        print(\"Please say something:\")\n        audio = recognizer.listen(source)\n        try:\n            g_text = recognizer.recognize_google(audio)\n            print(\"=====\",g_text)",
        "detail": "voice_deepseek",
        "documentation": {}
    },
    {
        "label": "auto_answer",
        "kind": 2,
        "importPath": "voice_deepseek",
        "description": "voice_deepseek",
        "peekOfCode": "def auto_answer(text):\n    r=subprocess.run(['ollama','run',model,text],capture_output=True,text=True)\n    cleaned_output = re.sub(r'<.*?>','',r.stdout)\n    cleaned_output=cleaned_output.replace('**', ' ')\n    return cleaned_output\nwhile True:\n    print(\"in\")\n    text=listen()\n    if text.upper()==\"BREAK\": \n        print(\"=====\")",
        "detail": "voice_deepseek",
        "documentation": {}
    },
    {
        "label": "check_for_sound",
        "kind": 2,
        "importPath": "voice_deepseek",
        "description": "voice_deepseek",
        "peekOfCode": "def check_for_sound(indata):\n    \"\"\"Function to check if sound (or speech) is detected by calculating the volume.\"\"\"\n    # Calculate the volume (magnitude) of the audio data\n    volume_norm = np.linalg.norm(indata) * 10  # Increase the multiplier for sensitivity\n    if volume_norm > 500:\n        return True\n    else:\n        return False\ndef audio_callback(indata, frames, time, status):\n    \"\"\"Callback function to process the audio data and detect sound.\"\"\"",
        "detail": "voice_deepseek",
        "documentation": {}
    },
    {
        "label": "audio_callback",
        "kind": 2,
        "importPath": "voice_deepseek",
        "description": "voice_deepseek",
        "peekOfCode": "def audio_callback(indata, frames, time, status):\n    \"\"\"Callback function to process the audio data and detect sound.\"\"\"\n    if status:\n        print(status, flush=True)\n    # Check if sound is detected based on the volume\n    if check_for_sound(indata):\n        print(\"Sound detected!\")\n        speak(\"Sound detected!\")  # Respond via TTS\n    else:\n        print(\"No sound detected.\")",
        "detail": "voice_deepseek",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "voice_deepseek",
        "description": "voice_deepseek",
        "peekOfCode": "engine = pyttsx3.init()\nmode=True\ndef speak(cleaned_output):\n    engine.setProperty('rate', 150)\n    if mode:\n        print(\"======***\")\n        engine.say(cleaned_output)\n        engine.runAndWait()\n    else:\n        engine.stop()",
        "detail": "voice_deepseek",
        "documentation": {}
    }
]